// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`child #create should be able to create context after child created 1`] = `
Object {
  "a": Object {
    "argsFromContext": Array [
      3,
      2,
      1,
    ],
    "fromContext": "yeah",
  },
  "ctx": Object {
    "test": Object {
      "args": Array [
        3,
        2,
        1,
      ],
      "ctx": "yeah",
    },
  },
}
`;

exports[`child #create should be able to create context after child created 2`] = `
Array [
  [Error: Context of given type does not exist],
]
`;

exports[`child #create should be able to create multiple contexts 1`] = `
Object {
  "anotherCtx": Object {
    "anotherTest": Object {
      "args": Array [
        2,
        1,
        3,
      ],
      "ctx": "yeah",
    },
  },
  "child": Object {
    "fromAnotherContext": Array [
      2,
      1,
      3,
    ],
    "fromTestContext": Array [
      3,
      2,
      1,
    ],
  },
  "ctx": Object {
    "test": Object {
      "args": Array [
        3,
        2,
        1,
      ],
      "ctx": "yeah",
    },
  },
}
`;

exports[`child #create should be able to create same context in different subtrees 1`] = `
Object {
  "a": Object {
    "ctx": Object {
      "anotherTest": Object {
        "args": Array [
          2,
          3,
          1,
        ],
        "ctx": "yeah",
      },
      "test": Object {
        "args": Array [
          1,
          2,
          3,
        ],
        "ctx": "yeah",
      },
    },
  },
  "b": Object {
    "ctx": Object {
      "anotherTest": Object {
        "args": Array [
          2,
          1,
          3,
        ],
        "ctx": "yeah",
      },
      "test": Object {
        "args": Array [
          3,
          2,
          1,
        ],
        "ctx": "yeah",
      },
    },
  },
}
`;

exports[`child #create should create context and available in child 1`] = `
Object {
  "a": Object {
    "argsFromContext": Array [
      3,
      2,
      1,
    ],
    "fromContext": "yeah",
  },
  "ctx": Object {
    "test": Object {
      "args": Array [
        3,
        2,
        1,
      ],
      "ctx": "yeah",
    },
  },
}
`;

exports[`child #create should destroy context with logic which created a context 1`] = `
Object {
  "ctx": Object {
    "anotherTest": Object {
      "args": Array [
        2,
        1,
        3,
      ],
      "ctx": "yeah",
    },
    "test": Object {
      "args": Array [
        3,
        2,
        1,
      ],
      "ctx": "yeah",
    },
  },
}
`;

exports[`child #create should destroy context with logic which created a context 2`] = `
Array [
  true,
  true,
  true,
  true,
]
`;

exports[`child #create should override a parent context if same created in child 1`] = `
Object {
  "anotherChild": Object {
    "fromContext": Array [
      3,
      2,
      1,
    ],
  },
  "child": Object {
    "child": Object {
      "fromContext": Array [
        2,
        2,
        2,
      ],
    },
    "ctx": Object {
      "anotherTest": Object {
        "args": Array [
          2,
          2,
          2,
        ],
        "ctx": "yeah",
      },
      "test": Object {
        "args": Array [
          2,
          2,
          2,
        ],
        "ctx": "yeah",
      },
    },
  },
  "ctx": Object {
    "anotherTest": Object {
      "args": Array [
        2,
        1,
        3,
      ],
      "ctx": "yeah",
    },
    "test": Object {
      "args": Array [
        3,
        2,
        1,
      ],
      "ctx": "yeah",
    },
  },
}
`;

exports[`child #create should override a parent context if same created in child 2`] = `Array []`;

exports[`child #create should throw an error if context already created - in root 1`] = `
Object {
  "ctx": Object {
    "anotherTest": Object {
      "args": Array [
        2,
        1,
        3,
      ],
      "ctx": "yeah",
    },
    "test": Object {
      "args": Array [
        3,
        2,
        1,
      ],
      "ctx": "yeah",
    },
  },
}
`;

exports[`child #create should throw an error if context already created - in root 2`] = `
Array [
  [Error: Context "TEST_CONTEXT" already created],
]
`;

exports[`child #get should throw an error if given context is not defined 1`] = `
Object {
  "child": Object {},
}
`;

exports[`child #get should throw an error if given context is not defined 2`] = `
Array [
  [Error: Context of given type does not exist],
]
`;

exports[`child #subscribe should catch messages from context if subscribed 1`] = `
Object {
  "child": Object {},
  "ctx": Object {
    "test": Object {
      "args": Array [
        3,
        2,
        1,
      ],
      "ctx": "yeah",
    },
  },
}
`;

exports[`child #subscribe should catch messages from context if subscribed 2`] = `
Array [
  Message {
    "some": "update",
  },
]
`;

exports[`child #subscribe should not catch messages from context by default 1`] = `
Object {
  "child": Object {},
  "ctx": Object {
    "test": Object {
      "args": Array [
        3,
        2,
        1,
      ],
      "ctx": "yeah",
    },
  },
}
`;

exports[`child #subscribe should remove subscription when logic destroyed 1`] = `
Object {
  "child": null,
  "ctx": Object {
    "test": Object {
      "args": Array [
        3,
        2,
        1,
      ],
      "ctx": "yeah",
    },
  },
}
`;

exports[`child #subscribe should throw an error if given context is not defined 1`] = `
Object {
  "child": Object {},
}
`;

exports[`child #subscribe should throw an error if given context is not defined 2`] = `
Array [
  [Error: Context of given type does not exist],
]
`;

exports[`child #update should send update context from child 1`] = `
Object {
  "a": Object {
    "argsFromContext": Array [
      3,
      2,
      1,
    ],
    "fromContext": "yeah",
  },
  "ctx": Object {
    "anotherTest": Object {
      "args": Array [
        2,
        1,
        3,
      ],
      "ctx": "yeah",
      "test": "event",
    },
    "test": Object {
      "args": Array [
        3,
        2,
        1,
      ],
      "ctx": "yeah",
      "test": "event",
    },
  },
}
`;

exports[`child #update should send update context from root 1`] = `
Object {
  "a": Object {
    "argsFromContext": Array [
      3,
      2,
      1,
    ],
    "fromContext": "yeah",
  },
  "ctx": Object {
    "anotherTest": Object {
      "args": Array [
        2,
        1,
        3,
      ],
      "ctx": "yeah",
      "test": "event",
    },
    "test": Object {
      "args": Array [
        3,
        2,
        1,
      ],
      "ctx": "yeah",
      "test": "event",
    },
  },
}
`;
